{"version":3,"sources":["services/types/index.tsx","components/ListView.tsx","components/views/index.tsx","components/views/models/index.tsx","components/ListViewContainer.tsx","services/Http.tsx","services/graphql/index.tsx","services/graphql/queries/PageResults.gql.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["HttpMethod","ListView","currentIndex","countItems","props","values","length","handleScroll","loadMore","loadMoreItemsBuffer","call","renderItem","index","key","renderCell","className","name","id","this","window","addEventListener","removeEventListener","type","itemRenderer","threshold","React","PureComponent","ListViewRenderer","item","src","image","alt","style","backgroundColor","color","title","String","ListViewModel","ListViewContainer","hasNextPage","state","results","data","Page","pageInfo","getNextPage","currentPage","getCurrentPage","updateResults","json","Error","prevItems","media","nextItems","concat","loadData","dataProvider","nextPage","setState","loading","fetchData","then","response","error","updatedResults","loadMoreData","getValues","arr","map","english","native","coverImage","medium","RenderListViewCell","Http","url","headers","body","fetch","method","POST","undefined","errorMessage","GraphQLClient","endpoint","gqlQuery","page","variables","QueryBody","Post","loc","query","source","Query","JSON","stringify","replace","gql","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf6c02e3.chunk.js","sourcesContent":["export * from './DataModel'\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n}\n\nexport interface HttpResponse<T> {\n  json?: T\n  error: boolean\n  errorMessage: string\n}\n\nexport interface DataProvider {\n  endpoint: string\n  fetchData: <T>(id?: number) => Promise<HttpResponse<T>>\n}\n","import React from 'react'\nimport ReactList from 'react-list'\nimport { KeyValues } from '../types'\nimport './ListView.scss'\n\ninterface ListViewProps {\n  values: Array<KeyValues>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  renderCell?: (values: Array<KeyValues | any>, index: number, key: number | string) => JSX.Element\n  loadMore?: () => void\n  loadMoreItemsBuffer?: number\n}\n\nclass ListView extends React.PureComponent<ListViewProps> {\n  currentIndex = 0\n\n  componentDidMount(): void {\n    const { loadMore } = this.props\n    if (loadMore) {\n      window.addEventListener('scroll', this.handleScroll)\n    }\n  }\n\n  componentWillUnmount(): void {\n    const { loadMore } = this.props\n    if (loadMore) {\n      window.removeEventListener('scroll', this.handleScroll)\n    }\n  }\n\n  countItems = (): number => {\n    const { values } = this.props\n    return values.length\n  }\n\n  handleScroll = (): void => {\n    // load more items when scrolling near the end of scroll view\n    if (this.props.loadMore && this.countItems() - this.currentIndex < (this.props.loadMoreItemsBuffer || 10)) {\n      this.props.loadMore.call(this)\n    }\n  }\n\n  renderItem = (index: number, key: number | string): JSX.Element => {\n    this.currentIndex = index\n    const { values, renderCell } = this.props\n    const className = index % 2 ? 'item' : 'item even'\n    // custom view model renderer\n    if (renderCell) {\n      return renderCell.call(this, values, index, key)\n    }\n    // default renderer\n    return (\n      <div key={key} className={className}>\n        <code>{index}</code>\n        <h3 className=\"title\">{values[index].name}</h3>\n        <p>\n          <span>#</span>\n          {values[index].id}\n        </p>\n      </div>\n    )\n  }\n\n  render(): React.ReactNode {\n    return <ReactList length={this.countItems()} type=\"uniform\" itemRenderer={this.renderItem} threshold={500} />\n  }\n}\n\nexport default ListView\n","import React from 'react'\nimport ListViewModel from './models'\n\nconst ListViewRenderer = (values: ListViewModel[], index: number, key: number | string): JSX.Element => {\n  const className = index % 2 ? 'item' : 'item even'\n  const item = values[index]\n  return (\n    <div key={key} className={className}>\n      <img key={index} src={item.image} alt={item.name} style={{ backgroundColor: item.color }} />\n      <div className=\"content\">\n        <h3 className=\"title\" title={String(item.id)}>\n          {item.name}\n        </h3>\n        <code>{index}</code>\n      </div>\n    </div>\n  )\n}\n\nexport default ListViewRenderer\n","import { KeyValues, ValueType } from '../../../types'\n\nexport default class ListViewModel implements KeyValues {\n  [key: string]: ValueType\n\n  name: string\n\n  id: number\n\n  image: string\n\n  color: string\n\n  constructor(id: number, name: string, image: string, color: string) {\n    this.id = id\n    this.name = name\n    this.image = image\n    this.color = color\n  }\n}\n","import React from 'react'\nimport ListView from './ListView'\nimport RenderListViewCell from './views'\nimport { Results, Media, DataProvider } from '../services/types'\nimport ListViewModel from './views/models'\nimport './ListViewContainer.scss'\n\ninterface ListViewContainerProps {\n  dataProvider: DataProvider\n}\n\ninterface ListViewContainerState {\n  loading: boolean\n  results: Results\n}\n\nclass ListViewContainer extends React.PureComponent<ListViewContainerProps, ListViewContainerState> {\n  constructor(props: ListViewContainerProps) {\n    super(props)\n    this.state = { loading: false, results: {} }\n  }\n\n  componentDidMount(): void {\n    this.loadData()\n  }\n\n  hasNextPage = (): boolean => {\n    if (this.state.results && this.state.results.data && this.state.results.data.Page.pageInfo.hasNextPage) {\n      return true\n    }\n    return false\n  }\n\n  getNextPage = (): number => {\n    if (this.state.results && this.state.results.data && this.state.results.data.Page.pageInfo.hasNextPage) {\n      return this.state.results.data.Page.pageInfo.currentPage + 1\n    }\n    return 0\n  }\n\n  getCurrentPage = (): number => {\n    if (this.state.results && this.state.results.data && this.state.results.data.Page.pageInfo.hasNextPage) {\n      return this.state.results.data.Page.pageInfo.currentPage\n    }\n    return 0\n  }\n\n  updateResults = (json: Results): Results => {\n    if (!this.state.results.data || !json.data) {\n      throw Error('Error loading data')\n    }\n    // append results\n    const prevItems = this.state.results.data.Page.media\n    const nextItems = json.data.Page.media\n    const media = prevItems.concat(nextItems)\n    const { pageInfo } = json.data.Page\n    // return data with appended values\n    return {\n      data: {\n        Page: {\n          media,\n          pageInfo,\n        },\n      },\n    }\n  }\n\n  loadData = (): void => {\n    const { dataProvider } = this.props\n    const nextPage = this.getNextPage()\n    this.setState({ loading: true })\n    dataProvider.fetchData<Results>(nextPage).then(response => {\n      if (response.error || !response.json) {\n        // TODO: handle error gracefully and return\n        throw Error('Failed to fetch json data')\n      }\n      const updatedResults = nextPage <= 1 ? response.json : this.updateResults(response.json)\n      this.setState({ results: updatedResults, loading: false })\n    })\n  }\n\n  loadMoreData = (): void => {\n    // check if already loading\n    if (this.state.loading) {\n      return\n    }\n    this.loadData()\n  }\n\n  getValues = (arr: Media[]): ListViewModel[] => {\n    return arr.map(media => new ListViewModel(media.id, media.title.english || media.title.native, media.coverImage.medium, media.coverImage.color))\n  }\n\n  render(): React.ReactNode {\n    const { results, loading } = this.state\n    if (loading && this.getCurrentPage() === 0) {\n      return (\n        <div className=\"loading\">\n          <div className=\"spinner\" />\n          <p>Loading</p>\n        </div>\n      )\n    }\n    if (!results || !results.data || !results.data.Page || !results.data.Page.media) {\n      return (\n        <div className=\"error\">\n          <p>Sorry, no data available</p>\n        </div>\n      )\n    }\n    const values = this.getValues(results.data.Page.media)\n    return (\n      <div className=\"list-view-container\">\n        <ListView values={values} renderCell={RenderListViewCell} loadMore={this.loadMoreData} loadMoreItemsBuffer={10} />\n      </div>\n    )\n  }\n}\n\nexport default ListViewContainer\n","import { HttpResponse, HttpMethod } from './types'\n\nclass Http {\n  static async Post<T>(url: string, headers: Record<string, string>, body: string): Promise<HttpResponse<T>> {\n    try {\n      const response = await fetch(url, {\n        method: HttpMethod.POST,\n        body,\n        headers,\n      })\n      const json: T = await response.json()\n      return {\n        json,\n      } as HttpResponse<T>\n    } catch (err) {\n      // return error response - failed to get results as json type <T>\n      return {\n        json: undefined,\n        error: true,\n        errorMessage: err,\n      } as HttpResponse<T>\n    }\n  }\n}\n\nexport default Http\n","import { DocumentNode } from 'graphql'\nimport { GraphQLQuery } from './types'\nimport { HttpResponse, DataProvider } from '../types'\nimport Http from '../Http'\nimport { KeyValues } from '../../types'\n\nclass GraphQLClient implements DataProvider {\n  readonly endpoint: string\n\n  gqlQuery: DocumentNode\n\n  constructor(endpoint: string, gqlQuery: DocumentNode) {\n    this.endpoint = endpoint\n    this.gqlQuery = gqlQuery\n  }\n\n  fetchData<T>(page = 1): Promise<HttpResponse<T>> {\n    const headers = {\n      'Content-Type': 'application/json',\n    }\n    // TODO: abstract variables\n    const variables: KeyValues = { page }\n    const body = GraphQLClient.QueryBody(this.gqlQuery, variables)\n\n    // Sends GraphQL paginated query\n    return Http.Post<T>(this.endpoint, headers, body)\n  }\n\n  static QueryBody = (gqlQuery: DocumentNode, variables: KeyValues): string => {\n    if (!gqlQuery.loc) {\n      throw Error('Failed to get GraphQL document')\n    }\n    const query = gqlQuery.loc.source.body\n    const json = GraphQLClient.Query(query, variables)\n    // strips out whitespace for POST body request\n    return JSON.stringify(json)\n      .replace(/\\\\n/g, '')\n      .replace(/\\\\t/g, ' ')\n      .replace(/\\s\\s+/g, ' ')\n  }\n\n  static Query = (query: string, variables: KeyValues): GraphQLQuery => {\n    return {\n      query,\n      variables,\n    }\n  }\n}\n\nexport default GraphQLClient\n","import gql from 'graphql-tag'\n\nexport default gql`\n  query($page: Int!) {\n    Page(page: $page) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(sort: ID, isAdult: false) {\n        id\n        title {\n          romaji\n          english\n          native\n          userPreferred\n        }\n        coverImage {\n          extraLarge\n          large\n          medium\n          color\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport './App.scss'\nimport ListViewContainer from './components/ListViewContainer'\nimport GraphQLClient from './services/graphql'\nimport gqlQuery from './services/graphql/queries/PageResults.gql'\n\nconst dataProvider = new GraphQLClient('https://graphql.anilist.co/', gqlQuery)\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App anilist\">\n      <ListViewContainer dataProvider={dataProvider} />\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}